/*
* Copyright 2024 Sebastian Samaruga
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.sebxama.activation.boot;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationStartedEvent;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.event.EventListener;
import org.springframework.kafka.core.reactive.ReactiveKafkaConsumerTemplate;
import org.springframework.kafka.core.reactive.ReactiveKafkaProducerTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.sebxama.activation.service.ActivationService;

import reactor.core.Disposable;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.kafka.receiver.ReceiverRecord;

@Configuration
public class KafkaListener {

	@Autowired
	ReactiveKafkaConsumerTemplate<String, String> receiverTemplate;

	@Autowired
	ReactiveKafkaProducerTemplate<String, String> producerTemplate;

	@Autowired
	WebClient.Builder wcBuilder;

	@Autowired
	ActivationService activationService;
	
    @EventListener(ApplicationStartedEvent.class)
    public Disposable startKafkaConsumer() {
        return receiverTemplate.receiveAutoAck()
        // .delayElements(Duration.ofSeconds(2L)) // BACKPRESSURE
        .doOnNext(consumerRecord -> 
        	System.out.println("received key={"+consumerRecord.key()+"}, value={"+consumerRecord.value()+"} from topic={"+consumerRecord.topic()+"}, offset={"+consumerRecord.offset()+"}"))
        .map(consumerRecord -> this.handleEvent(consumerRecord.key(), consumerRecord.value()))
        .doOnNext(dto -> System.out.println("successfully consumed {"+dto.getClass().getSimpleName()+"}={"+dto+"}"))
        .doOnError(throwable -> System.out.println("error: {"+throwable.getMessage()+"}"))
        .subscribe();
    }

    private Mono<String> handleEvent(String key, String record) {
    	// Services business layer handling
    	System.out.println("handleEvent; KEY: "+key+"; RECORD: "+record);
    	return Mono.just(record);
    }
	
}
